
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СкоростьДвижения = 0.1;
	НоваяИгра();
	ЗагрузитьРекорд();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СкоростьДвиженияПриИзменении(Элемент)
	
	Если Ползунок > 9 Тогда
		Ползунок = 9;
	КонецЕсли;
	
	СкоростьДвижения = ((10-Ползунок)/10);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВверх(Команда)
	
	ТекПуть = 1;
	ПроверитьКонамиКод(ТекПуть);
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения, Истина);
	
	РоботВключен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВправо(Команда)
	
	ТекПуть = 2;
	ПроверитьКонамиКод(ТекПуть);
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения, Истина);
	
	РоботВключен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВниз(Команда)
	
	ТекПуть = 3;
	ПроверитьКонамиКод(ТекПуть);
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения, Истина);
	
	РоботВключен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВлево(Команда)
	
	ТекПуть = 4;
	ПроверитьКонамиКод(ТекПуть);
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения, Истина);
	
	РоботВключен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСтоп(Команда)
	
	ПроверитьКонамиКод(5);
	
	ОтключитьОбработчикОжидания("ОболочкаОбработчика");
	ОтключитьОбработчикОжидания("ОболочкаОбработчикаРобота");
	
	РоботВключен = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьРобота(Команда)
	
	ТекПуть = 1;
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения*2, Истина);
	ПодключитьОбработчикОжидания("ОболочкаОбработчикаРобота", СкоростьДвижения, Истина);
	ПодключитьОбработчикОжидания("ОболочкаОбработчикаПроверкиЯблок", СкоростьДвижения, Истина);
	
	РоботВключен = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Сбрасывает игру до начала
&НаСервере
Процедура НоваяИгра()
	
	ПоляДлины.Очистить();
	Поле1.Очистить();
	ВведенныеКлавишиДляКонамиКода.Очистить();
	
	//Вверх = 1, Вправо = 2, Вниз = 3, Влево = 4;
	ЕстьНовоеЯблоко = Ложь;
	Пока НЕ ЕстьНовоеЯблоко Цикл
		
		ГСЧ1 = Новый ГенераторСлучайныхЧисел();
		СлучайнаяСтрока = ГСЧ1.СлучайноеЧисло(1, 9);
		ГСЧ2 = Новый ГенераторСлучайныхЧисел();
		СлучайнаяКолонка = ГСЧ2.СлучайноеЧисло(1, 9);
		
		СлучайнаяЯчейка = "R" + СлучайнаяСтрока + "C" + СлучайнаяКолонка;
		
		Если ПоляДлины.НайтиПоЗначению(СлучайнаяЯчейка) = Неопределено Тогда
			ЕстьНовоеЯблоко = Истина;
			ПутьЯблоко = СлучайнаяЯчейка;
		КонецЕсли;
		
	КонецЦикла;
	//ПутьЯблоко = "R2C2";
	ТекПоле = "R5C5";
	Поле1.Область(ТекПоле).ЦветФона = Новый Цвет(0,0,0);
	Поле1.Область("R1C1:R10C10").ШиринаКолонки = 2.5;
	
	Длина = 1;
	
	ПоляДлины.Добавить(ТекПоле);

КонецПроцедуры

// Основная процедура обработки, вся логика поведения змейки здесь
&НаКлиенте
Процедура ОболочкаОбработчика()
	
	Если ЗначениеЗаполнено(ПутьЯблоко) Тогда
		Поле1.Область(ПутьЯблоко).ЦветФона = Новый Цвет(130,0,0);
	КонецЕсли;
	
	ПредыдущееПоле = ТекПоле;
	ПредПолеСтрока = Число(Прав(Лев(ТекПоле, 2), 1));
	ПредПолеКолонка = Число(Прав(ТекПоле, 1));
	
	//Получаю координаты нового поля
	ШаблонКоординат = "R%1C%2";
	Если ТекПуть = 1 Тогда
		//Вверх                 
		НовоеПоле = СтрШаблон(ШаблонКоординат, Строка(?((ПредПолеСтрока - 1)<1, 9, ПредПолеСтрока - 1)), Строка(ПредПолеКолонка));
	ИначеЕсли ТекПуть = 2 Тогда
		//Вправо
		НовоеПоле = СтрШаблон(ШаблонКоординат, Строка(ПредПолеСтрока), Строка(?((ПредПолеКолонка + 1)>10, 1, ПредПолеКолонка + 1)));
	ИначеЕсли ТекПуть = 3 Тогда
		//Вниз
		НовоеПоле = СтрШаблон(ШаблонКоординат, Строка(?((ПредПолеСтрока + 1)>9, 1, ПредПолеСтрока + 1)), Строка(ПредПолеКолонка));
	ИначеЕсли ТекПуть = 4 Тогда
		//Влево
		НовоеПоле = СтрШаблон(ШаблонКоординат, Строка(ПредПолеСтрока), Строка(?((ПредПолеКолонка - 1)<1, 9, ПредПолеКолонка - 1)));
	КонецЕсли;
	
	ТекПоле = НовоеПоле;
	
	Если НЕ ПоляДлины.НайтиПоЗначению(ТекПоле) = Неопределено Тогда // Игра закончена
		
		Если Длина = 81 Тогда
			ТекстСообщения = "Поздравляем! Вы победили";
		Иначе
			ТекстСообщения = "Apple is in another Castle.
								|Ваш счет: " + Длина;
		КонецЕсли;
		
		// Сохранение нового рекорда
		Если Длина > Рекорд Тогда
			Рекорд = Длина;
			СохранитьРекорд();
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстСообщения, ?(РоботВключен, 1, 0), "Конец игры");
		
		Длина = 1;
		НоваяИгра();
		
		// Сразу продолжить игру при включенном боте
		Если РоботВключен Тогда
			ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения*2, Истина);
			ПодключитьОбработчикОжидания("ОболочкаОбработчикаРобота", СкоростьДвижения, Истина);
			ПодключитьОбработчикОжидания("ОболочкаОбработчикаПроверкиЯблок", СкоростьДвижения, Истина);
		КонецЕсли;
		
	Иначе // Игра продолжается
		
		Если НЕ ПредыдущееПоле = ПутьЯблоко Тогда
			//Изменяю цвет предыдущего поля
			Поле1.Область(ПоляДлины[0]).ЦветФона = Новый Цвет(255,255,255);
			ПоляДлины.Удалить(0);                 
		КонецЕсли;
		//Изменяю цвет нового поля
		ПоляДлины.Добавить(ТекПоле);
		Для Каждого СохрПоле ИЗ ПоляДлины Цикл
			Поле1.Область(СохрПоле).ЦветФона = Новый Цвет(0,0,0);
			СоздатьГраницыПоля(СохрПоле);
		КонецЦикла;
		
		Если ПредыдущееПоле = ПутьЯблоко Тогда
			Длина = Длина + 1;
			//Создаем новое яблоко	
			ЕстьНовоеЯблоко = Ложь;
			Пока НЕ ЕстьНовоеЯблоко Цикл
				
				ЦифраДляГенератора = ТекущаяДата() - Дата(1900, 1, 1);
				
				ГСЧ1 = Новый ГенераторСлучайныхЧисел();
				СлучайнаяСтрока = ГСЧ1.СлучайноеЧисло(1, 9);
				ГСЧ2 = Новый ГенераторСлучайныхЧисел(ЦифраДляГенератора);
				СлучайнаяКолонка = ГСЧ2.СлучайноеЧисло(1, 9);
				
				СлучайнаяЯчейка = "R" + СлучайнаяСтрока + "C" + СлучайнаяКолонка;
				
				Если ПоляДлины.НайтиПоЗначению(СлучайнаяЯчейка) = Неопределено Тогда
					ЕстьНовоеЯблоко = Истина;
					ПутьЯблоко = СлучайнаяЯчейка;
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
		
		ПодключитьОбработчикОжидания("ОболочкаОбработчика", СкоростьДвижения, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик простого бота, который сам играет змейку
&НаКлиенте
Процедура ОболочкаОбработчикаРобота()
	
	рПутьКолонка = "";
	рПутьСтрока = "";
	
	рТекКолонка = Прав(ТекПоле, 1);
	рТекСтрока = Прав(Лев(ТекПоле, 2), 1);	

	рКолонкаКуда = Прав(ПутьЯблоко, 1);
	рСтрокаКуда = Прав(Лев(ПутьЯблоко, 2), 1); 
	
	Если рТекКолонка = рКолонкаКуда Тогда
		рПутьКолонка = "=";
	ИначеЕсли рТекКолонка > рКолонкаКуда Тогда
		рПутьКолонка = "Л";
	ИначеЕсли рТекКолонка < рКолонкаКуда Тогда
		рПутьКолонка = "П";
	Иначе
		рПутьКолонка = "!";
	КонецЕсли;
	
	Если рТекСтрока = рСтрокаКуда Тогда
		рПутьСтрока = "=";
	ИначеЕсли рТекСтрока > рСтрокаКуда Тогда
		рПутьСтрока = "В";
	ИначеЕсли рТекСтрока < рСтрокаКуда Тогда
		рПутьСтрока = "Н";
	Иначе
		рПутьСтрока = "!";
	КонецЕсли;
	
	ПолучитьСледПолеРобота(рПутьСтрока, рПутьКолонка, рТекКолонка, рТекСтрока);
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчикаРобота", СкоростьДвижения, Истина);

КонецПроцедуры

// Получение координат для движения бота
// Бот всегда стремится к яблоку
&НаКлиенте
Процедура ПолучитьСледПолеРобота(рПутьСтрока, рПутьКолонка, рТекКолонка, рТекСтрока)
	
	//			R4C5
	//
	//	R5C4	R5C5	R5C6
	//
	//			R6C5
	
	рСледующееПоле = 0;
	
	// Если можно переходить через стенки
	ПолеСлево 	= "R" + рТекСтрока + "C" + (?(Число(рТекКолонка) - 1 < 1, 9, Число(рТекКолонка) - 1));
	ПолеСверху 	= "R" + (?(Число(рТекСтрока) - 1 < 1, 9, Число(рТекСтрока) - 1)) + "C" + рТекКолонка;
	ПолеСправо 	= "R" + рТекСтрока + "C" + (?(Число(рТекКолонка) + 1 > 9, 1, Число(рТекКолонка) + 1));
	ПолеСнизу 	= "R" + (?(Число(рТекСтрока) + 1 > 9, 1, Число(рТекСтрока) + 1)) + "C" + рТекКолонка;
	
	//// Если нельзя переходить через стенки
	//ПолеСлево 	= "R" + рТекСтрока + "C" + (?(Число(рТекКолонка) - 1 < 1, 0, Число(рТекКолонка) - 1));
	//ПолеСверху 	= "R" + (?(Число(рТекСтрока) - 1 < 1, 0, Число(рТекСтрока) - 1)) + "C" + рТекКолонка;
	//ПолеСправо 	= "R" + рТекСтрока + "C" + (?(Число(рТекКолонка) + 1 > 9, 0, Число(рТекКолонка) + 1));
	//ПолеСнизу 	= "R" + (?(Число(рТекСтрока) + 1 > 9, 0, Число(рТекСтрока) + 1)) + "C" + рТекКолонка;
	
	Если рПутьКолонка = "Л" Тогда	
		Если рПутьСтрока = "Н" Тогда	
			рСледующееПоле = 2;	
		Иначе
			рСледующееПоле = 3;
		КонецЕсли;	
	ИначеЕсли рПутьКолонка = "П" Тогда	
		Если рПутьСтрока = "В" Тогда
			рСледующееПоле = 0;	
		Иначе	
			рСледующееПоле = 1;		
		КонецЕсли;	
	Иначе
		Если рПутьСтрока = "В" Тогда
			рСледующееПоле = 0;	
		ИначеЕсли рПутьСтрока = "Н"	Тогда
			рСледующееПоле = 2;	
		КонецЕсли;	
	КонецЕсли;
	
	СледПолеНайдено = Ложь;
	СчВерт = 0;
	
	Пока НЕ СледПолеНайдено Цикл
		
		рСледующееПоле = рСледующееПоле + 1;
		СчВерт = СчВерт + 1;
		
		Если рСледующееПоле = 1 Тогда
			Если ПоляДлины.НайтиПоЗначению(ПолеСверху) = Неопределено 
				И СтрЧислоВхождений(ПолеСверху, "0") = 0 Тогда
				СледПолеНайдено = Истина;
			КонецЕсли;	
		ИначеЕсли рСледующееПоле = 2 Тогда
			Если ПоляДлины.НайтиПоЗначению(ПолеСправо) = Неопределено
				И СтрЧислоВхождений(ПолеСправо, "0") = 0 Тогда
				СледПолеНайдено = Истина;
			КонецЕсли;
		ИначеЕсли рСледующееПоле = 3 Тогда
			Если ПоляДлины.НайтиПоЗначению(ПолеСнизу) = Неопределено
				И СтрЧислоВхождений(ПолеСнизу, "0") = 0 Тогда
				СледПолеНайдено = Истина;
			КонецЕсли;
		ИначеЕсли рСледующееПоле = 4 Тогда
			Если ПоляДлины.НайтиПоЗначению(ПолеСлево) = Неопределено
				И СтрЧислоВхождений(ПолеСлево, "0") = 0 Тогда
				СледПолеНайдено = Истина;
			КонецЕсли;
		ИНаче
			рСледующееПоле = 1;
		КонецЕсли;
		
		Если СчВерт = 10 Тогда
			СледПолеНайдено = Истина;
			Прервать;	
		КонецЕсли;
		
	КонецЦикла;
	
	ТекПуть = рСледующееПоле;
	
КонецПроцедуры

// Отрисовывает границы между ячейками змейки
// Косметическая процедура
&НаКлиенте
Процедура СоздатьГраницыПоля(ПолеГраницы)
	
	Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
	
	СтрокаПоля = Число(Прав(Лев(ПолеГраницы, 2), 1));
	КолонкаПоля = Число(Прав(ПолеГраницы, 1));
	
	ПолеСверху = "R" + Строка(СтрокаПоля - 1) + Прав(ПолеГраницы, 2);
	ПолеСправа = "" + Лев(ПолеГраницы, 3) + Строка(КолонкаПоля + 1);
	ПолеСнизу = "R" + Строка(СтрокаПоля + 1) + Прав(ПолеГраницы, 2);
	ПолеСлево = "" + Лев(ПолеГраницы, 3) + Строка(КолонкаПоля - 1);
	
	ТекИндекс = ПоляДлины.Индекс(ПолеГраницы);
	СледПоле = Неопределено;
	ПредПоле = Неопределено;
	
	//Если это первое поле
	Если ТекИндекс = 0 И ПоляДлины.Количество() <> 1 Тогда	
		СледПоле = ПоляДлины[ТекИндекс + 1];
	//Если это единственное поле
	ИначеЕсли ТекИндекс = 0 И ПоляДлины.Количество() = 1 Тогда	
		
	//Если это последнее поле
	ИначеЕсли ТекИндекс = ПоляДлины.Количество()-1 Тогда	
		ПредПоле = ПоляДлины[ТекИндекс - 1];	
	Иначе
		СледПоле = ПоляДлины[ТекИндекс + 1];
		ПредПоле = ПоляДлины[ТекИндекс - 1];
	КонецЕсли; 
	
	
	Если СледПоле <> Неопределено И ПредПоле <> Неопределено Тогда
		
		ПредПоле = ПредПоле.Значение;
		СледПоле = СледПоле.Значение;
		
		// 010
		Если (ПредПоле = ПолеСлево И СледПоле = ПолеСправа) ИЛИ (СледПоле = ПолеСлево И ПредПоле = ПолеСправа) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( , Линия, ,Линия);	
							
		// 0
		// 1
		// 0
		ИначеЕсли (ПредПоле = ПолеСверху И СледПоле = ПолеСнизу) ИЛИ (СледПоле = ПолеСверху И ПредПоле = ПолеСнизу) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( Линия, , Линия,);
			
		// 01
		//  0
		ИначеЕсли (ПредПоле = ПолеСлево И СледПоле = ПолеСнизу) ИЛИ (СледПоле = ПолеСлево И ПредПоле = ПолеСнизу) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( , Линия, Линия,);
			
		// 01
		// 0
		ИначеЕсли (ПредПоле = ПолеСправа И СледПоле = ПолеСнизу) ИЛИ (СледПоле = ПолеСправа И ПредПоле = ПолеСнизу) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( Линия, Линия, ,);
			
		// 0
		// 10
		ИначеЕсли (ПредПоле = ПолеСправа И СледПоле = ПолеСверху) ИЛИ (СледПоле = ПолеСправа И ПредПоле = ПолеСверху) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( Линия, , ,Линия);
			
		//  0
		// 01
		ИначеЕсли (ПредПоле = ПолеСлево И СледПоле = ПолеСверху) ИЛИ (СледПоле = ПолеСлево И ПредПоле = ПолеСверху) Тогда
			
			Поле1.Область(ПолеГраницы).Обвести( , , Линия,Линия);
			
		
		КонецЕсли;
		
	ИначеЕсли (СледПоле <> Неопределено И ПредПоле = Неопределено) ИЛИ (СледПоле = Неопределено И ПредПоле <> Неопределено) Тогда
		
		ПолеРядом = ?(СледПоле = Неопределено, ПредПоле, СледПоле);
		
		// 01 10 0 1
		//       1 0
		Поле1.Область(ПолеГраницы).Обвести(?(ПолеРядом.Значение = ПолеСлево, Неопределено, Линия),
											?(ПолеРядом.Значение = ПолеСверху, Неопределено, Линия), 
											?(ПолеРядом.Значение = ПолеСправа, Неопределено, Линия), 
											?(ПолеРядом.Значение = ПолеСнизу, Неопределено, Линия));
		
	Иначе 
		
		// 1
		Поле1.Область(ПолеГраницы).Обвести( Линия, Линия, Линия,Линия);
		
	КонецЕсли;
	
	Поле1.Область(ПолеГраницы).ЦветРамки = Новый Цвет(255, 255, 255);
	
	
	
	
		
		
		
	

КонецПроцедуры

// Показывает настройки игры при вводе спец-кода
// Шуточная процедура
&НаКлиенте
Процедура ПроверитьКонамиКод(НажатаяКнопка)

	ВведенныеКлавишиДляКонамиКода.Добавить(НажатаяКнопка);
	Для Каждого СтрокаСЗ ИЗ ВведенныеКлавишиДляКонамиКода Цикл
		
		ТекИндекс = ВведенныеКлавишиДляКонамиКода.Индекс(СтрокаСЗ);
		
		Если ТекИндекс = 0 Тогда
			Если НЕ СтрокаСЗ.Значение = 1 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 1 Тогда
			Если НЕ СтрокаСЗ.Значение = 1 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 2 Тогда
			Если НЕ СтрокаСЗ.Значение = 3 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 3 Тогда
			Если НЕ СтрокаСЗ.Значение = 3 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 4 Тогда
			Если НЕ СтрокаСЗ.Значение = 4 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 5 Тогда
			Если НЕ СтрокаСЗ.Значение = 2 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 6 Тогда
			Если НЕ СтрокаСЗ.Значение = 4 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 7 Тогда
			Если НЕ СтрокаСЗ.Значение = 2 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		ИначеЕсли ТекИндекс = 8 Тогда
			Если НЕ СтрокаСЗ.Значение = 5 Тогда
				ВведенныеКлавишиДляКонамиКода.Очистить();
			Иначе		
				Элементы.Группа1.Видимость = НЕ Элементы.Группа1.Видимость;
				Элементы.ГруппаТаблицы.Видимость = НЕ Элементы.ГруппаТаблицы.Видимость;
				ВведенныеКлавишиДляКонамиКода.Очистить();
			КонецЕсли;
		Иначе
			ВведенныеКлавишиДляКонамиКода.Очистить();
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОболочкаОбработчикаПроверкиЯблок()
	
	яТекКолонка = Прав(ПутьЯблоко, 1);
	яТекСтрока = Прав(Лев(ПутьЯблоко, 2), 1);
	
	яПолеСлево 	= "R" + яТекСтрока + "C" + (?(Число(яТекКолонка) - 1 < 1, 0, Число(яТекКолонка) - 1));
	яПолеСверху = "R" + (?(Число(яТекСтрока) - 1 < 1, 0, Число(яТекСтрока) - 1)) + "C" + яТекКолонка;
	яПолеСправо = "R" + яТекСтрока + "C" + (?(Число(яТекКолонка) + 1 > 9, 0, Число(яТекКолонка) + 1));
	яПолеСнизу 	= "R" + (?(Число(яТекСтрока) + 1 > 9, 0, Число(яТекСтрока) + 1)) + "C" + яТекКолонка;
	
	ВсеПоляУЯблока = 0;
	ВсеПоляУЯблока = ?((ПоляДлины.НайтиПоЗначению(яПолеСлево) = Неопределено И СтрЧислоВхождений(яПолеСлево, "0") = 0), ВсеПоляУЯблока, ВсеПоляУЯблока + 1);
	ВсеПоляУЯблока = ?((ПоляДлины.НайтиПоЗначению(яПолеСверху) = Неопределено И СтрЧислоВхождений(яПолеСверху, "0") = 0), ВсеПоляУЯблока, ВсеПоляУЯблока + 1);
	ВсеПоляУЯблока = ?((ПоляДлины.НайтиПоЗначению(яПолеСправо) = Неопределено И СтрЧислоВхождений(яПолеСправо, "0") = 0), ВсеПоляУЯблока, ВсеПоляУЯблока + 1);
	ВсеПоляУЯблока = ?((ПоляДлины.НайтиПоЗначению(яПолеСнизу) = Неопределено И СтрЧислоВхождений(яПолеСнизу, "0") = 0), ВсеПоляУЯблока, ВсеПоляУЯблока + 1);
	
	ЯблокоСвободно = ВсеПоляУЯблока < 3;
	
	ПодключитьОбработчикОжидания("ОболочкаОбработчикаПроверкиЯблок", СкоростьДвижения, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьРекорд()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("Рекорд", Рекорд);
	
	ХранилищеНастроекДанныхФорм.Сохранить(ЭтаФорма, "РекордыЗмейки", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьРекорд()
	
	ТекНастройки = ХранилищеНастроекДанныхФорм.Загрузить(ЭтаФорма, "РекордыЗмейки");
	Если ТекНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтаФорма, ТекНастройки);
	
КонецПроцедуры

#КонецОбласти
